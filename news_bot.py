import os
import requests
import openai

def get_fmp_quote(symbol):
    API_KEY = os.environ['FMP_KEY']
    url = f'https://financialmodelingprep.com/api/v3/quote/{symbol}?apikey={API_KEY}'
    response = requests.get(url)
    print(f"–ó–∞–ø—Ä–æ—Å –∫ FMP: {url}")
    print(f"–û—Ç–≤–µ—Ç: {response.text}")
    data = response.json()
    try:
        price = float(data[0]['price'])
        return price
    except Exception:
        return None

def get_news():
    NEWS_API_KEY = os.environ.get('NEWS_API_KEY')
    if not NEWS_API_KEY:
        return "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–Ω–µ—Ç API –∫–ª—é—á–∞)."
    url = f"https://newsapi.org/v2/top-headlines?category=business&language=ru&apiKey={NEWS_API_KEY}"
    response = requests.get(url)
    data = response.json()
    articles = data.get("articles", [])[:3]
    news_list = []
    for art in articles:
        news_list.append(f"‚Ä¢ {art['title']}")
    return "\n".join(news_list) if news_list else "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."

def gpt_analysis(xauusd, eurusd, gbpusd, news):
    openai.api_key = os.environ['OPENAI_API_KEY']
    prompt = f"""–¢—ã ‚Äî —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –í–æ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ:
–ó–æ–ª–æ—Ç–æ (XAU/USD): {xauusd:.2f}
EUR/USD: {eurusd:.4f}
GBP/USD: {gbpusd:.4f}
–ù–æ–≤–æ—Å—Ç–∏: {news}

–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤–∞–ª—é—Ç –∏ –∑–æ–ª–æ—Ç–∞, –≤—ã–¥–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –¥—Ä–∞–π–≤–µ—Ä—ã. –ü–∏—à–∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
"""
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",  # –∏–ª–∏ "gpt-4", –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
        messages=[{"role": "user", "content": prompt}],
        max_tokens=200,
        temperature=0.7,
    )
    return response.choices[0].message.content.strip()

def make_report():
    xauusd = get_fmp_quote('GCUSD')
    eurusd = get_fmp_quote('EURUSD')
    gbpusd = get_fmp_quote('GBPUSD')

    if None in [xauusd, eurusd, gbpusd]:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–æ–ª–æ—Ç—É –∏–ª–∏ –≤–∞–ª—é—Ç–∞–º. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö GitHub Actions."

    news = get_news()
    try:
        forecast = gpt_analysis(xauusd, eurusd, gbpusd, news)
    except Exception as e:
        forecast = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç GPT: {e}"

    return f"""üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä:

ü•á XAU/USD: {xauusd:.2f}
üí∂ EUR/USD: {eurusd:.4f}
üí∑ GBP/USD: {gbpusd:.4f}

üì∞ –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:
{news}

ü§ñ –ü—Ä–æ–≥–Ω–æ–∑ –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç GPT:
{forecast}

–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ —É–¥–∞—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!
"""

def send_telegram_message(message):
    TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
    CHAT_ID = os.environ['TELEGRAM_CHAT_ID']
    url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    response = requests.post(url, data=payload)
    print(response.text)
    return response.json()

def main():
    try:
        report = make_report()
        send_telegram_message(report)
        print("Message sent successfully!")
    except Exception as e:
        print(f"Error occurred: {e}")

if __name__ == "__main__":
    main()
