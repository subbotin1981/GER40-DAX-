import os
import requests

def get_fmp_quote(symbol):
    API_KEY = os.environ['FMP_KEY']
    url = f'https://financialmodelingprep.com/api/v3/quote/{symbol}?apikey={API_KEY}'
    response = requests.get(url)
    print(f"–ó–∞–ø—Ä–æ—Å –∫ FMP: {url}")
    print(f"–û—Ç–≤–µ—Ç: {response.text}")
    data = response.json()
    try:
        price = float(data[0]['price'])
        return price
    except Exception:
        return None

def get_news():
    NEWS_API_KEY = os.environ.get('NEWS_API_KEY')
    if not NEWS_API_KEY:
        return "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–Ω–µ—Ç API –∫–ª—é—á–∞)."
    url = f"https://newsapi.org/v2/top-headlines?category=business&language=ru&apiKey={NEWS_API_KEY}"
    response = requests.get(url)
    data = response.json()
    articles = data.get("articles", [])[:3]
    news_list = []
    for art in articles:
        news_list.append(f"‚Ä¢ {art['title']}")
    return "\n".join(news_list) if news_list else "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."

def make_report():
    # –¢–∏–∫–µ—Ä—ã FMP: DAX (^GDAXI), S&P500 (^GSPC), Euro Stoxx 50 (^STOXX50E), –∑–æ–ª–æ—Ç–æ (GCUSD), EURUSD, GBPUSD
    ger40 = get_fmp_quote('^GDAXI')
    sp500 = get_fmp_quote('^GSPC')
    eu50 = get_fmp_quote('^STOXX50E')
    xauusd = get_fmp_quote('GCUSD')
    eurusd = get_fmp_quote('EURUSD')
    gbpusd = get_fmp_quote('GBPUSD')

    if None in [ger40, sp500, eu50, xauusd, eurusd, gbpusd]:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –∏–ª–∏ –≤–∞–ª—é—Ç–∞–º. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö GitHub Actions."

    news = get_news()
    return f"""üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä:

üá©üá™ GER40 (DAX): {ger40:.2f}
üá™üá∫ Euro Stoxx 50 (EU50): {eu50:.2f}
üá∫üá∏ S&P 500: {sp500:.2f}
ü•á XAU/USD: {xauusd:.2f}
üí∂ EUR/USD: {eurusd:.4f}
üí∑ GBP/USD: {gbpusd:.4f}

üì∞ –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:
{news}

–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ —É–¥–∞—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!
"""

def send_telegram_message(message):
    TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
    CHAT_ID = os.environ['TELEGRAM_CHAT_ID']
    url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    response = requests.post(url, data=payload)
    print(response.text)
    return response.json()

def main():
    try:
        report = make_report()
        send_telegram_message(report)
        print("Message sent successfully!")
    except Exception as e:
        print(f"Error occurred: {e}")

if __name__ == "__main__":
    main()
