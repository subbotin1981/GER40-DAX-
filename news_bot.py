import os
import requests
import time

def get_index(symbol, market):
    # –î–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é GLOBAL_QUOTE
    API_KEY = os.environ['ALPHA_VANTAGE_KEY']
    url = f'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}.{market}&apikey={API_KEY}'
    response = requests.get(url)
    data = response.json()
    try:
        price = float(data['Global Quote']['05. price'])
        return price
    except Exception:
        return None

def get_sp500():
    # S&P 500 —á–µ—Ä–µ–∑ Alpha Vantage (SPX)
    API_KEY = os.environ['ALPHA_VANTAGE_KEY']
    url = f'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=^GSPC&apikey={API_KEY}'
    response = requests.get(url)
    data = response.json()
    try:
        price = float(data['Global Quote']['05. price'])
        return price
    except Exception:
        return None

def get_fx(from_symbol, to_symbol):
    API_KEY = os.environ['ALPHA_VANTAGE_KEY']
    url = f'https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency={from_symbol}&to_currency={to_symbol}&apikey={API_KEY}'
    response = requests.get(url)
    data = response.json()
    try:
        rate = float(data['Realtime Currency Exchange Rate']['5. Exchange Rate'])
        return rate
    except Exception:
        return None

def get_news():
    NEWS_API_KEY = os.environ.get('NEWS_API_KEY')
    if not NEWS_API_KEY:
        return "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–Ω–µ—Ç API –∫–ª—é—á–∞)."
    url = f"https://newsapi.org/v2/top-headlines?category=business&language=ru&apiKey={NEWS_API_KEY}"
    response = requests.get(url)
    data = response.json()
    articles = data.get("articles", [])[:3]
    news_list = []
    for art in articles:
        news_list.append(f"‚Ä¢ {art['title']}")
    return "\n".join(news_list) if news_list else "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."

def analyze_impact(sp500, eurusd):
    impact = ""
    if sp500 and sp500 > 5000:
        impact += "–†–æ—Å—Ç S&P 500 –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ GER40.\n"
    if eurusd and eurusd < 1.08:
        impact += "–°–ª–∞–±—ã–π –µ–≤—Ä–æ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤ GER40.\n"
    if not impact:
        impact = "–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –¥–ª—è GER40 –Ω–µ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è."
    return impact

def make_report():
    # DAX (GER40) ‚Äî —Ç–∏–∫–µ—Ä GDAXI –Ω–∞ XETRA (market=F)
    ger40 = get_index('GDAXI', 'F')
    time.sleep(12)  # Alpha Vantage –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É!
    sp500 = get_sp500()
    time.sleep(12)
    eurusd = get_fx('EUR', 'USD')
    if ger40 is None or sp500 is None or eurusd is None:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –∏–ª–∏ –≤–∞–ª—é—Ç–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    news = get_news()
    impact = analyze_impact(sp500, eurusd)
    return f"""üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä:

üá©üá™ GER40 (DAX): {ger40:.2f}
üá∫üá∏ S&P 500: {sp500:.2f}
üí∂ EUR/USD: {eurusd:.4f}

üì∞ –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:
{news}

üìä –í–æ–∑–º–æ–∂–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ GER40:
{impact}

–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ —É–¥–∞—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!
"""

def send_telegram_message(message):
    TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
    CHAT_ID = os.environ['TELEGRAM_CHAT_ID']
    url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    response = requests.post(url, data=payload)
    print(response.text)
    return response.json()

def main():
    try:
        report = make_report()
        send_telegram_message(report)
        print("Message sent successfully!")
    except Exception as e:
        print(f"Error occurred: {e}")

if __name__ == "__main__":
    main()
