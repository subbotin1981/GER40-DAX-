import os
import yfinance as yf
import requests

def get_indices_and_fx():
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –∏ –≤–∞–ª—é—Ç–∞–º
    ger40 = yf.Ticker("^GDAXI")  # GER40 (DAX)
    sp500 = yf.Ticker("^GSPC")   # S&P 500
    eurusd = yf.Ticker("EURUSD=X")
    usdeur = yf.Ticker("USDEUR=X")

    ger40_data = ger40.history(period="1d")
    sp500_data = sp500.history(period="1d")
    eurusd_data = eurusd.history(period="1d")

    ger40_close = ger40_data['Close'].iloc[-1]
    sp500_close = sp500_data['Close'].iloc[-1]
    eurusd_close = eurusd_data['Close'].iloc[-1]

    return ger40_close, sp500_close, eurusd_close

def get_news():
    # –ü—Ä–∏–º–µ—Ä —Å NewsAPI (–Ω—É–∂–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á)
    NEWS_API_KEY = os.environ.get('NEWS_API_KEY')
    if not NEWS_API_KEY:
        return "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–Ω–µ—Ç API –∫–ª—é—á–∞)."
    url = f"https://newsapi.org/v2/top-headlines?category=business&language=ru&apiKey={NEWS_API_KEY}"
    response = requests.get(url)
    data = response.json()
    articles = data.get("articles", [])[:3]
    news_list = []
    for art in articles:
        news_list.append(f"‚Ä¢ {art['title']}")
    return "\n".join(news_list) if news_list else "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."

def analyze_impact(sp500, eurusd):
    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ GER40
    impact = ""
    if sp500 > 5000:
        impact += "–†–æ—Å—Ç S&P 500 –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ GER40.\n"
    if eurusd < 1.08:
        impact += "–°–ª–∞–±—ã–π –µ–≤—Ä–æ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤ GER40.\n"
    if not impact:
        impact = "–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –¥–ª—è GER40 –Ω–µ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è."
    return impact

def make_report():
    ger40, sp500, eurusd = get_indices_and_fx()
    news = get_news()
    impact = analyze_impact(sp500, eurusd)
    return f"""üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä:

üá©üá™ GER40 (DAX): {ger40:.2f}
üá∫üá∏ S&P 500: {sp500:.2f}
üí∂ EUR/USD: {eurusd:.4f}

üì∞ –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:
{news}

üìä –í–æ–∑–º–æ–∂–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ GER40:
{impact}

–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ —É–¥–∞—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!
"""

def send_telegram_message(message):
    TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
    CHAT_ID = os.environ['TELEGRAM_CHAT_ID']
    url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    requests.post(url, data=payload)

def main():
    try:
        report = make_report()
        send_telegram_message(report)
        print("Message sent successfully!")
    except Exception as e:
        print(f"Error occurred: {e}")

if __name__ == "__main__":
    main()